#!/bin/bash

    ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++##
    #  This program is a wrapper for xmessage,gxmessage,Xdialog or kdialog#
    #           The script is very stable, and should not break           #
    #                                           -ppurka                   #
    ##-------------------------------------------------------------------##

        #----------------- License: GPL-3 or later -----------------#
        # Copyright (C) 2007 - 2012  P. Purkayastha                 #
        # Contact: ppurka _at_ gmail _dot_ com                      #
        # This program comes with ABSOLUTELY NO WARRANTY;           #
        # This is free software, and you are welcome to redistribute#
        # it under certain conditions;                              #
        #                                                           #
        # For a brief summary of the license see the file COPYING   #
        # that is distributed with this program.                    #
        #                                                           #
        # For the full text of the license see                      #
        # http://www.gnu.org/licenses/gpl-3.0.html                  #
        #-----------------------------------------------------------#

    ##++++++++++++++++++++++++    Changelog   +++++++++++++++++++++++++++##
    # 08/10/2014    Implement text input box. Auto height for zenity.     #
    #               Get rid of trailing spaces.                           #
    # 18/06/2012    Many bugfixes with zenity and cleanups.               #
    # 27/05/2012    Massive cleanup. Use arrays instead of dumb strings.  #
    # 25/05/2012    Add support for zenity.                               #
    # 09/03/2011    Bugfix: Provide smaller $rows and $cols to dialog     #
    # 08/12/2011    Make sure xmessage returns status 0 for lists         #
    # 12/26/2010    Use dialog --print-maxsize to get max terminal size   #
    # 09/13/2010    Add support for dialog in case X is not available     #
    #               Some cleanups and bashisms                            #
    # 11/20/2007    Synced with desktop and added comments from desktop   #
    #               Changed version to 0.91 from 0.9                      #
    #               Corrected a bug in output of checked list from kdialog#
    # ~10/2007      Added warningyesno, error, sorry and switched over to #
    #               kdialog as the default since it has better display    #
    #               Added a workaround for kdialog when it does not       #
    #               recognize \n within the text                          #
    # <10/1/2007    Umpteen number of untracked changes                   #
    #               Added an arbitrary version 0.9 !                      #
    ##-------------------------------------------------------------------##

. `which my_bash_functions 2> /dev/null` || {
    echo -e " \x1b[1;31mError!\x1b[0m The script \x1b[1;32mmy_bash_functions\
\x1b[0m was not found in your \$PATH
        Please ensure that the script is available and executable"
    exit 1
}

# Help me!! {{{
help() {
    echo
    echo -e "  $yellow $( basename ${0} ):$normal"
    info "This program is a wrapper for xmessage/gxmessage/Xdialog/kdialog
    The order of selection is Xdialog, kdialog, gxmessage, and finally
    xmessage if none of the previous one is found in \$PATH."
    info "Usage:     $( basename ${0} ) [<options>]"
    info "Options:
    -h | --help         This help text
    --center            Center the window
    --title <title>     Set the title of the window
    --yesno <txt>       Provide a Yes/No type of dialog
    --warningyesno <txt>   Provide a Yes/No type of dialog (only for kdialog)
    --msgbox <txt>      Provide a message box
    --error <txt>       Provide a message box with error icon (only kdialog)
    --sorry <txt>       Provide a message box with sorry icon (only kdialog)
    --menu <txt> <tag1 description1> ...              Provide a menu of options
    --checklist <txt> <tag1 description1 status1> ... Provide a checklist
                        ${bold}Available only for Xdialog/kdialog${normal}
    --radiolist <txt> <tag1 description1 status> ...  Provide a radiolist
    --passive <txt> [<N sec>]                         Provide a passive box,
                        which closes after N secs. (default 10sec)
    --savefile <startdir> <filter>  Provide a file selection dialog
                        ${bold}Not available for xmessage${normal}
    --inputbox <txt>    Provide a text input box
                        ${bold}Not available for xmessage$normal"
    echo
}
# }}}

: ${DIALOG:="kdialog zenity Xdialog gxmessage xmessage"} # In order of preference
ZENITY_HEIGHT=""
#DIALOG=kdialog

selectdialog() { # {{{
    if [[ -z "$DISPLAY" ]]; then
        DIALOG="$( which dialog )" || return 1
        local out="$( dialog --stdout --print-maxsize )"
        out="${out#*: }"; out="${out/\,}"
        # Leave some space on all sides
        rows="$(( ${out% *} - 10 ))"
        cols="$(( ${out#* } - 10 ))"
        return 0
    fi
    for i in ${DIALOG}; do
        if which $i >& /dev/null; then
            DIALOG="$( which $i )"
            if [[ "${DIALOG##*/}" == "zenity" ]]; then
                # Assume that xrandr is installed. Not going to take care
                # of missing xrandr right now.
                ZENITY_HEIGHT="$( xrandr | grep '*' )"
                ZENITY_HEIGHT="${ZENITY_HEIGHT#*x}"
                ZENITY_HEIGHT="${ZENITY_HEIGHT%%\ *}"
                ZENITY_HEIGHT="$(( $ZENITY_HEIGHT * 80 / 100 ))"
            fi
            return 0
        fi
    done
    return 1
}
# }}}

# displaymsg:
# Options:
#   --center        Center the window
#   --title <title> Set the title of the window
#   --yesno <txt>   Provide a Yes/No type of dialog
#   --warningyesno <txt>   Provide a Yes/No type of dialog (only for kdialog)
#   --msgbox <txt>  Provide a message box
#   --error <txt>  Provide a message box with error icon (only for kdialog)
#   --sorry <txt>  Provide a message box with sorry icon (only for kdialog)
#   --menu <txt> <tag1 description1> ...  Provide a menu of options
#   --checklist <txt> <tag1 description1 status1> ... Provide a checklist
#   --radiolist <txt> <tag1 description1 status> ... Provide a radiolist
#   --passive <txt> [<N sec>]   Provide a passive box, which closes after N secs.
#   --savefile <startdir> <filter>  Provide a file selection dialog
#   --inputbox "string above input box" Provide text input dialog
displaymsg() {  # {{{
    local TMP_FILE=$( mktemp /tmp/${0##*/}.XXXX) || \
        die "Can not create temporary file"
    local -a DIALOG_BUTTONS       # Actual buttons of (g)xmessage
    local -a DIALOG_TEXT          # The main text for [Xk]dialog
    local -a DIALOG_TITLE         # The command for the title of $DIALOG
    local -A ZENITY_TAGS          # Dictionary of tags for Zenity
    local DIALOG_BUTTON_COUNT=0   # No of buttons (g)xmessage has
    local DIALOG_CENTER=""        # Holds the command for centering $DIALOG
    local DIALOG_TIMEOUT=10       # Timeout for passive dialogs
    local XMSG_BUTTONS=""         # Temp variable for xmessage buttons
    local ZENITY_LIST=0           # Set to 1 when zenity is used with lists
    DIALOG_RETURN_PRINT=""        # The text returned by $DIALOG
    DIALOG_RETURN_STATUS=-1       # The return status of $DIALOG

    until [[ -z "$1" ]]; do
    case "$1" in
    --center)
        case ${DIALOG##*\/} in
            *message)   DIALOG_CENTER="-center";;
            Xdialog)    DIALOG_CENTER="--center";;
            *dialog)    ;;
        esac ;;
    --title) shift
        case ${DIALOG##*\/} in
            xmessage)   ;;
            gxmessage)  DIALOG_TITLE=("-title" "$1") ;;
            *)          DIALOG_TITLE=("--title" "$1") ;;
        esac ;;

    --yesno|--warningyesno) D1="$1"
        shift
        case ${DIALOG##*\/} in
            *xmessage)  echo -e "$1" >> $TMP_FILE
                DIALOG_BUTTONS+=("-buttons" '"Yes":0,"No":1')
                DIALOG_BUTTONS+=("-default" '"Yes"')
                DIALOG_BUTTON_COUNT=2 ;;
            dialog)     DIALOG_TEXT+=("--yesno" "$1" $rows $cols) ;;
            kdialog)    DIALOG_TEXT+=($D1 "$1") ;;
            Xdialog)    DIALOG_TEXT+=("--yesno" "$1" "0x0") ;;
            zenity)     DIALOG_TEXT+=("--question" "--text" "$1") ;;
        esac ;;

    --sorry|--msgbox|--error) D1="$1"
        shift
        case ${DIALOG##*\/} in
            *xmessage)  echo -e "$1" >> $TMP_FILE
                DIALOG_BUTTONS+=("-buttons" '"Ok":1' "-default" '"Ok"')
                DIALOG_BUTTON_COUNT=1 ;;
            dialog)     DIALOG_TEXT+=("--msgbox" "$1" "$rows" "$cols") ;;
            kdialog)    DIALOG_TEXT+=($D1 "$1") ;;
            Xdialog)    DIALOG_TEXT+=("--msgbox" "$1" "0x0") ;;
            zenity)     [[ "$1" = "--error" ]] || D1="--info"
                        DIALOG_TEXT+=("$D1" "--text" "$1") ;;
        esac ;;

    --menu) shift # {{{
        # We have to fake a menu for zenity by using radiolist
        case ${DIALOG##*\/} in
            *xmessage)  echo -e "$1\n" >> $TMP_FILE;
                        DIALOG_BUTTONS+=("-buttons");
                        DIALOG_BUTTON_COUNT=2 ;; # At least 1 menu + Cancel
            dialog)     DIALOG_TEXT+=("--menu" "$1" $rows $cols
                                      $(( $rows - 4 ))) ;;
            kdialog)    DIALOG_TEXT+=("--menu" "$1") ;;
            Xdialog)    DIALOG_TEXT+=("--menu" "$1" "0x0") ;;
            zenity)     DIALOG_TEXT+=("--list" "--text" "$1"
                                      "--column" "Choose an option"
                                      "--height" $ZENITY_HEIGHT )
                        ZENITY_LIST=1 ;;
        esac
        shift
        until [[ -z "$1" ]]; do
            case ${DIALOG##*\/} in
                *xmessage)  echo -e "$1: $2" >> $TMP_FILE
                            XMSG_BUTTONS+="\"$1\":$DIALOG_BUTTON_COUNT,"
                            ((DIALOG_BUTTON_COUNT++)) ;;
                Xdialog)    DIALOG_BUTTONS+=("$1" "$2")
                            ((DIALOG_BUTTON_COUNT++)) ;;
                *dialog)    DIALOG_BUTTONS+=("$1" "$2") ;;
                zenity)     DIALOG_BUTTONS+=("$2")
                            ZENITY_TAGS["$2"]="$1" ;;
            esac
            # Check for --option in command line
            if echo "$3" | grep -q -s "^--"; then
                shift
                break
            else
                shift
                shift
            fi
        done
        case ${DIALOG##*\/} in
            *xmessage)  DIALOG_BUTTONS+=("${XMSG_BUTTONS}'Cancel':1"
                                        "-default" "Cancel" "-print") ;;
            Xdialog)    ((DIALOG_BUTTON_COUNT++))
                        DIALOG_BUTTONS=("$DIALOG_BUTTON_COUNT"
                                        "${DIALOG_BUTTONS[@]}") ;;
            *)          ;;
        esac ;; # }}}

    --checklist) shift # {{{
        case ${DIALOG##*\/} in
            *xmessage)  displaymsg --msgbox "Error! --checklist option is \
available only for Xdialog/kdialog/dialog"
                        rm -f $TMP_FILE
                        die "--checklist option is available only for \
Xdialog/kdialog/dialog" ;;
            dialog)     DIALOG_TEXT+=("--checklist" "$1"
                                        $rows $cols $(( $rows - 4 ))) ;;
            kdialog)    DIALOG_TEXT+=("--checklist" "$1") ;;
            Xdialog)    DIALOG_TEXT+=("--checklist" "$1" "0x0") ;;
            zenity)     DIALOG_TEXT+=("--list" "--checklist" "--text" "$1"
                            "--column" " " "--column" "Choose your options"
                            "--height" $ZENITY_HEIGHT )
                        ZENITY_LIST=1 ;;
        esac
        shift
        until [[ -z "$1" ]]; do
            case ${DIALOG##*\/} in
                Xdialog) DIALOG_BUTTONS+=("$1" "$2" "$3")
                         ((DIALOG_BUTTON_COUNT++)) ;;
                *dialog) DIALOG_BUTTONS+=("$1" "$2" "$3");;
                zenity)  case "$3" in
                            [oO][nN])       DIALOG_BUTTONS+=("TRUE") ;;
                            [oO][fF][fF])   DIALOG_BUTTONS+=("FALSE") ;;
                         esac
                         DIALOG_BUTTONS+=("$2")
                         ZENITY_TAGS["$2"]="$1" ;;
            esac
            # Check for --option in command line
            if echo "$4" | grep -q -s "^--"; then
                shift
                shift
                break
            else
                shift
                shift
                shift
            fi
        done
        [[ "${DIALOG##*\/}" = "Xdialog" ]] && {
            DIALOG_BUTTON_COUNT="$(( $DIALOG_BUTTON_COUNT + 1))"
            DIALOG_BUTTONS=("$DIALOG_BUTTON_COUNT" "${DIALOG_BUTTONS[@]}")
        } ;; # }}}

    --radiolist)   # Need following to set the default radiolist item {{{
        [[ "${DIALOG/xmessage/}" != "${DIALOG}" ]] && \
            local DEFAULT_CANCEL="Cancel"
        shift
        case ${DIALOG##*\/} in
            *xmessage)  echo -e "$1\n" >> $TMP_FILE
                DIALOG_BUTTONS+=("-buttons")
                DIALOG_BUTTON_COUNT=2 ;; # At least one menu item + Cancel
            dialog)     DIALOG_TEXT+=("--radiolist" "$1" $rows $cols
                                      $(( $rows - 4 ))) ;;
            kdialog)    DIALOG_TEXT+=("--radiolist" "$1") ;;
            Xdialog)    DIALOG_TEXT+=("--radiolist" "$1" "0x0") ;;
            zenity)     DIALOG_TEXT+=("--list" "--radiolist" "--text" "$1"
                            "--column" " " "--column" "Choose your options"
                            "--height" $ZENITY_HEIGHT )
                        ZENITY_LIST=1 ;;
        esac
        shift
        until [[ -z "$1" ]]; do
            case ${DIALOG##*\/} in
              *xmessage) echo -e "$1: $2" >> $TMP_FILE
                        XMSG_BUTTONS+="'$1':$DIALOG_BUTTON_COUNT,"
                        ((DIALOG_BUTTON_COUNT++)) ;;
              Xdialog)  DIALOG_BUTTONS+=("$1" "$2" "$3")
                        ((DIALOG_BUTTON_COUNT++)) ;;
              *dialog)  DIALOG_BUTTONS+=("$1" "$2" "$3") ;;
              zenity)   case "$3" in
                          [oO][nN])       DIALOG_BUTTONS+=("TRUE") ;;
                          [oO][fF][fF])   DIALOG_BUTTONS+=("FALSE") ;;
                        esac
                        DIALOG_BUTTONS+=("$2")
                        ZENITY_TAGS["$2"]="$1" ;;
            esac
            if echo $3 | grep -q -s -i "on"; then
                DEFAULT_CANCEL="$1"
            fi
            # Check for --option in command line
            if echo "$4" | grep -q -s "^--"; then
                shift
                shift
                break
            else
                shift
                shift
                shift
            fi
        done
        case ${DIALOG##*\/} in
            *xmessage)  DIALOG_BUTTONS+=("${XMSG_BUTTONS}'Cancel':1"
                                "-default" "$DEFAULT_CANCEL" "-print") ;;
            Xdialog)    ((DIALOG_BUTTON_COUNT++))
                        DIALOG_BUTTONS=("$DIALOG_BUTTON_COUNT"
                                        "${DIALOG_BUTTONS[@]}") ;;
            *)          ;;
        esac ;; # }}}

    --passive) shift # {{{
                if ! { echo "$2" | grep -q -s "[[:alpha:]]"; } && \
                    [[ "$2" -gt 0 ]]; then
                    DIALOG_TIMEOUT=$2
                fi
        case ${DIALOG##*\/} in
            *xmessage)   echo -e "$1" >> $TMP_FILE
                        DIALOG_BUTTONS+=("-buttons" "'Ok':1" "-default"
                                         "'Ok'" "-timeout" $DIALOG_TIMEOUT)
                        DIALOG_BUTTON_COUNT=1 ;;
            dialog)     DIALOG_TEXT+=("--pause" "$1" $rows $cols
                                      $DIALOG_TIMEOUT) ;;
            kdialog)    DIALOG_TEXT+=("--passivepopup" "$1"
                                      $DIALOG_TIMEOUT) ;;
            Xdialog)    DIALOG_TEXT+=("--infobox" "$1" 0x0
                                      $(( $DIALOG_TIMEOUT*1000 ))) ;;
            zenity)     DIALOG_TEXT+=("--notification" "--text" "$1") ;;
        esac
        shift ;; # }}}

    --savefile) # for xmessage, open a small xterm # {{{
        shift
        case ${DIALOG##*\/} in
            xmessage)   # Use default.. can't implement it at present
                # However, the xterm command is like this:
                # xterm -xrm '*VT100*translations: #override \n\
                # <Key>Escape: string("^C\n") string("exit\n")\n'
                # What I don't know is how to take input from that term.
                displaymsg --msgbox \
                    "Error! File selection is not yet implemented in xmessage"
                rm -f $TMP_FILE
                die "File selection is not yet implemented in xmessage" ;;
            gxmessage)  echo -e "Enter the full path name of the file" > $TMP_FILE
                        DIALOG_TEXT+=("-title" "Select file" "-entrytext"
                                      "$1/$2")
                        DIALOG_BUTTON_COUNT=1 ;;
            dialog)     DIALOG_TEXT+=("--title" "Select file" "--fselect"
                                      "$1/$2" $rows $cols);;
            kdialog)    DIALOG_TEXT+=("--title" "Select file"
                                      "--getsavefilename" "$1" "$2") ;;
            Xdialog)    DIALOG_TEXT+=("--title" "Select file" "--fselect"
                                      "$1/$2" 0x0);;
            zenity)     DIALOG_TEXT+=("--file-selection" "--confirm-overwrite"
                                      "--save" "--filename" "$1/"
                                      "--file-filter" "$2") ;;
        esac
        shift ;; # }}}

    --inputbox)  # for text input. Only zenity and kdialog for now.
        shift
        case ${DIALOG##*\/} in
            xmessage)   displaymsg --error "Text input not available for xmessage!" ;;
            gxmessage)  DIALOG_TEXT+=("-entry") ;;
            dialog)     DIALOG_TEXT+=("--inputbox" "$1" $rows $cols) ;;
            Xdialog)    DIALOG_TEXT+=("--inputbox" "$1" 0x0) ;;
            kdialog)    DIALOG_TEXT+=("--inputbox" "$1") ;;
            zenity)     DIALOG_TEXT+=("--entry" "--text" "$1") ;;
         esac
         shift ;;

    *)  rm -f $TMP_FILE
        die "$1: Not yet implemented" ;;
    esac
    shift
    done

    # Show the dialog
    #info "$DIALOG $DIALOG_CENTER $DIALOG_TITLE $DIALOG_TEXT $DIALOG_BUTTONS"
    case ${DIALOG##*\/} in
    dialog)     DIALOG_RETURN_PRINT="$( eval '$DIALOG --stdout $DIALOG_CENTER "${DIALOG_TITLE[@]}" "${DIALOG_TEXT[@]}" "${DIALOG_BUTTONS[@]}"' )" ;;
    Xdialog)    DIALOG_RETURN_PRINT="$( eval '$DIALOG --stdout $DIALOG_CENTER "${DIALOG_TITLE[@]}" "${DIALOG_TEXT[@]}" "${DIALOG_BUTTONS[@]}"' )" ;;
    kdialog)  DIALOG_RETURN_PRINT="$( eval '$DIALOG $DIALOG_CENTER "${DIALOG_TITLE[@]}" "${DIALOG_TEXT[@]}" "${DIALOG_BUTTONS[@]}"' )" ;;
    gxmessage) DIALOG_RETURN_PRINT="$( eval '$DIALOG -wrap $DIALOG_CENTER "${DIALOG_TITLE[@]}" "${DIALOG_TEXT[@]}" "${DIALOG_BUTTONS[@]}" -file "$TMP_FILE"' )" ;;
    xmessage) DIALOG_RETURN_PRINT="$( eval '$DIALOG $DIALOG_CENTER "${DIALOG_TITLE[@]}" "${DIALOG_TEXT[@]}" "${DIALOG_BUTTONS[@]}" -file "$TMP_FILE"' )" ;;
    zenity)  DIALOG_RETURN_PRINT="$( eval '$DIALOG $DIALOG_CENTER "${DIALOG_TITLE[@]}" "${DIALOG_TEXT[@]}" "${DIALOG_BUTTONS[@]}"' )" ;;
    esac
    DIALOG_RETURN_STATUS=$?
    # Fix for xmessage. It returns the button count. Since Cancel==1, we
    # ignore the return status for all the other buttons.
    [[ "${DIALOG##*/}" = "xmessage" && $DIALOG_RETURN_STATUS -gt 1 ]] && \
        DIALOG_RETURN_STATUS=0
    rm -f $TMP_FILE
    if [[ $ZENITY_LIST -eq 1 ]]; then
        local tmp="$DIALOG_RETURN_PRINT"
        DIALOG_RETURN_PRINT=""
        IFS="|"
        for x in $tmp; do
            DIALOG_RETURN_PRINT+="${ZENITY_TAGS["$x"]}/"
        done
        DIALOG_RETURN_PRINT="${DIALOG_RETURN_PRINT%/}"
        unset IFS
    fi
}
# }}}


# Some error checking -- Don't even bother parsing command line
# if [[ -z "$DISPLAY" ]] && ! (xhost &> /dev/null); then die "This program is designed to be run in a graphical environment"; fi

if [[ -z "$1" || "$1" = "-h" || "$1" = "--help" ]]; then
    help; exit;
fi

# Some error checking
if ! selectdialog; then
    die "No message display program found."
fi
#echo $DIALOG

# Workaround for kdialog, which does not recognize \n at times
if [[ $DIALOG = "*kdialog" ]]; then
    displaymsg "${@[@]/\\n/\n }"
else
    displaymsg "$@"
fi

# Hack to make the return of checklist for *dialog to be compatible
if [[ "${@/--checklist/}" != "$@" ]]; then
    case "${DIALOG##*/}" in
        kdialog|dialog)
            DIALOG_RETURN_PRINT="${DIALOG_RETURN_PRINT[@]//\" \"//}"
            DIALOG_RETURN_PRINT="${DIALOG_RETURN_PRINT[@]//\"/}" ;;
        *) ;;
    esac
fi

echo "$DIALOG_RETURN_PRINT"
exit $DIALOG_RETURN_STATUS
